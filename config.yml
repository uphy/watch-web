initial_run: '{{ env "INITIAL_RUN" | default "false" }}'
jobs:
  - id: ur-{{ .item.shisya }}-{{ .item.danchi }}
    schedule: "@every 10m"
    source:
      # シェルコマンドを実行する。実行結果は文字列になる。
      shell:
        # 実行するコマンド
        command: ur {{ .item.shisya }} {{ .item.danchi }}
      # sourceを変換するフィルタ定義。0個以上指定可能。
      filters:
        - json_array: {}
        - json_transform:
            type: json_array
            transform:
              summary: '{{ .source.name }}({{ .source.type }})'
              description: |
                {{ with .source }}
                {{ .rent }}
                {{-  if .system }}(
                {{-    range $index, $s := .system }}
                {{-      if $index }}, {{end}}
                {{-      $s.制度名 }}
                {{-    end }})
                {{-  end -}}
                [共益費 {{ .commonfee }}{{ if .rent_normal }}, 通常 {{ .rent_normal }}{{ end }}]
                {{ end }}
              link: 'https://www.ur-net.go.jp/{{ .source.roomDetailLinkSp }}'
              thumbnail: '{{ .source.madori }}'
              system: |
                {{-  if .source.system }}(
                {{-    range $index, $s := .source.system }}
                {{-      if $index }}, {{end}}
                {{-      $s.制度名 }}
                {{-    end }})
                {{-  end -}}
    label: "{{ .item.name }}"
    link: https://www.ur-net.go.jp/chintai/kanto/tokyo/{{ .item.shisya }}_{{ .item.danchi }}0.html
    actions:
      - slack:
          url: '{{ env "SLACK_WEBHOOK_URL" }}'
    # ここで指定した要素数だけ、jobが複製される。
    # job内で、各配列要素は `.item として参照できる。
    with_items:
      - { shisya: 20, danchi: 688, name: "グリーンヒルズ東久留米" }
      - { shisya: 20, danchi: 399, name: "清瀬駅前ハイツ" }
      - { shisya: 20, danchi: 465, name: "グリーンプラザ高松＜光が丘＞" }
      - { shisya: 20, danchi: 391, name: "光が丘パークタウン いちょう通り八番街" }
      - { shisya: 20, danchi: 455, name: "光が丘パークタウン 大通り中央" }
      - { shisya: 20, danchi: 410, name: "光が丘パークタウン 四季の香弐番街" }
      - { shisya: 20, danchi: 369, name: "光が丘パークタウン 大通り南" }
      - { shisya: 20, danchi: 350, name: "光が丘パークタウン 公園南" }
      - { shisya: 20, danchi: 435, name: "光が丘パークタウン プロムナード十番街" }
  - id: amazon-{{ .item.id }}
    schedule: "@every 10m"
    label: '{{ .item.name }}'
    link: https://www.amazon.co.jp/dp/{{ .item.id }}/
    source:
      shell:
        command: |
          curl --compressed -sSL https://www.amazon.co.jp/dp/{{ .item.id }}/
      filters:
        # DOMを解釈して、json objectに変換
        # 変換が難しい。微妙。。
        # 開き直って、1要素だけ取得できるようにして、複数の値使うときは、template/json_transform使ってdom関数を呼び出すようにしたい
        # そうしたらこれいらなくなる
        - template: |
            {{ $saleprice := (.source.String | dom "#priceblock_saleprice").text }}
            {{ if $saleprice }}{{ $saleprice }}
            {{ else }}
            {{ (.source.String | dom "#priceblock_ourprice").text }}
            {{ end }}
      # デフォルトではfilteringしたあとのsourceの値が空でも空の値として継続する。
      # failを設定した場合には、空の場合実行失敗とみなす。
      empty: fail
      # sourceの収集中に失敗した場合、指定した回数リトライする。デフォルトではリトライしない。
      retry: 0
    actions:
      - slack:
          url: '{{ env "SLACK_WEBHOOK_URL" }}'
    with_items:
      - { id: 'B07H56HB8T', name: 'TOPVISION プロジェクター' }
# 各ジョブの現在の値を保存するストレージ
store:
  redis:
    # アドレスが空の場合には無効として、デフォルト(オンメモリ)に切り替える。
    redistogo: '{{ env "REDISTOGO_URL" }}'

# 型についての方針
# - プログラム側で暗黙的に型変換はやらないようにしたい。
#   例えばshellのoutputはstringの方がわかりやすい。
# - 変換するときはconfigの中でユーザーに明示的に変換させたい
# - ユーザーが変換するときは基本的にエラーは出さず緩く変換したい。
